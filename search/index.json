[{"content":"In this tutorial, I want to talk about Use case Diagram, one of the basic knowledge you need to know when studying Object-oriented Programming (OOP). For the illustrations in this tutorial, I\u0026rsquo;m using Astah UML, a design tool that supports UML. You can download it here, and learn how to use it with this documentation.\nWhat is a use case diagram? In Object-oriented paradigm, when it comes to designing the system, we often demonstrate that by the Unified Modeling Language (UML). A use case diagram can be used to summarize the details of your system\u0026rsquo;s users and their interaction with the system.\n So what exactly is the user\u0026rsquo;s interaction with the system?\n Good question. Supposed that you\u0026rsquo;re building an application, let\u0026rsquo;s say an online Bookstore. In this case, interactions are the things users can do with your application, such as:\n Viewing books Buying books Adding books to cart  You can add as many interactions as you can think of, but you got the point. And we can demonstrate the user\u0026rsquo;s interaction through the Use case Diagram.\nNow let\u0026rsquo;s learn how to draw it!\nUse case diagram components There are 5 main components you\u0026rsquo;ll be working with in a use case diagram:\n Actor Use Case Association System Boundary Box Relationships  Actor An actor is a user that interacts with the system. It can be a person, an organization, or even a server/ system.\nIn order to identify the actor, you need to answer this very basic question:\n \u0026ldquo;Who will interact with the application?\u0026rdquo;\n Let\u0026rsquo;s say you need to build an e-commerce website. So who will be the actor here?\n User Admin  Pretty simple, right?\nIn a use case diagram, an actor is normally drawn as a stickman, but it can also be drawn as in the picture below:\nOf course, you can draw the actor at your will, as long as there\u0026rsquo;s a detailed name with it.\nUse case, Association \u0026amp; Boundary These definitions are pretty straightforward, so I\u0026rsquo;ll just give you the concept and their symbols in the use case diagram:\n Use cases: Horizontally shaped ovals that represent the different uses that a user might have. Association: A line between actors and use cases. In complex diagrams, it is important to know which actors are associated with which use cases. System boundary boxes: A box that sets a system scope to use cases. All use cases outside the box would be considered outside the scope of that system. For example: In a bank, a client can only view their transactions, not all the transactions in the system, since that use case is out of their scope.  Generally, it\u0026rsquo;s easy to work with the above components, since they\u0026rsquo;re not hard to understand. The thing that might actually confuse you is Relationships.\nRelationships There are 3 types of relationships:\n Complicated \u0026hellip; Wait, wrong topic  There are 3 types of relationships, again:\n Include Extend Generalization  Include Include is like a must-have relationship between use cases.\nThink about include this way: suppose you\u0026rsquo;re hungry and want to get something to eat. You walk into MacDonald\u0026rsquo;s and say: \u0026ldquo;I want to order food!\u0026rdquo;. But what do you have to do first before that?\nYou have to choose what to eat first!\nAnd you can draw it in your use case diagram like this:\nSo to order food, you need to choose what to buy, pretty reasonable, right? That is the include relationship. Only when you finish choosing can you proceed to the payment. I\u0026rsquo;ve added another include use case to our diagram, \u0026ldquo;Pay the food\u0026rdquo; for later use.\nLet\u0026rsquo;s move on to the next one.\nExtend As I said earlier, include is a must-have relationship between use cases. However, extend is optional. That means if a use case is not compulsory, the actor can choose whether to do it, then it\u0026rsquo;s an extend relationship.\nSo if we go back to our previous example, the MacDonald\u0026rsquo;s one. When you pay for your food, it\u0026rsquo;s optional that you tip the waiter. We can demonstrate that in our use case diagram like this:\nAgain, pretty straightforward. When it comes to relationships in the use case diagram, just remember: Include is compulsory, extend is optional.\nGeneralization Generalization is basically to show a parent-child relationship between use cases or even actors. For example:\nSome use cases generalization relationships:\n Login (parent) -\u0026gt; Login with phone/ email (Child) Pay (parent) -\u0026gt; Pay with Paypal/ COD (Child)  Actors generalization relationships:\n Manager -\u0026gt; Staff Wholesalers -\u0026gt; Retailers  I will use our MacDonald\u0026rsquo;s example here again to demonstrate:\nOverall, generalization helps you display your use case diagram more clearer. If you learned Object-oriented programming (OOP), you\u0026rsquo;d realize that generalization is inheritable (Inheritance in OOP), which means the child inherits the parent\u0026rsquo;s properties and relationships of other use cases.\nConclusion Everything I just went through above is just the basics of the use case diagram. If you\u0026rsquo;re interested, there\u0026rsquo;s always more to learn, but I think that\u0026rsquo;s enough to draw your OOP assignments at school. Speaking of which, I think I\u0026rsquo;ll end the tutorial by showing you my very first use case diagram (I literally studied how to draw it for 10 mins because I didn\u0026rsquo;t realize that assignment\u0026rsquo;s deadline was in 1 hour). See you around!\n(Oh my gosh it\u0026rsquo;s so terrible and faulty..)\n","date":"2022-04-15T00:00:00Z","image":"https://hathai25.github.io/p/uml-use-case-diagram-tutorial/background_hu6f8835bfb4d550680a97dd841449a3e2_1953517_120x120_fill_q75_box_smart1.jpg","permalink":"https://hathai25.github.io/p/uml-use-case-diagram-tutorial/","title":"UML: Use Case Diagram Tutorial"},{"content":"You wake up. Sun is shining, birds are singing, got yourself a hot coffee and you look outside the window to watch the sunrise.\nWhat a wonderful start to the day!\nBut wait, did you forget something? Today\u0026rsquo;s the final exam day.\nNah, you didn\u0026rsquo;t forget that. In fact, you knew it was coming, like, a month ago. Yeah, a month ago.\nOne month ago, you got all your exam schedules. You had prepared and listed out everything you need to do to prepare for all those exams, so no big deal! Everything would be fine.\nThree weeks ago, your friend told you about a contest, which you found interesting. Or maybe you didn\u0026rsquo;t think it was that interesting, you just FOMO that you might lose the chance while everyone else didn\u0026rsquo;t. You spent a day just considering that, and in the end, you say no. But you lost a day.\nTwo weeks ago, you were assigned a new task. It\u0026rsquo;s a new and challenging one since you\u0026rsquo;ve never worked on such projects before. At this time, you\u0026rsquo;ve finished some subjects\u0026rsquo; tests, and you had barely studied for the last one, the one that would come today. But still, that task was so intriguing, you decided to take that anyway.\nOne week ago, you were still working on that project, at the same time studying for the final subject. You\u0026rsquo;re completely stressed out and exhausted. But more and more works kept on coming, just like Murphy\u0026rsquo;s law:\n \u0026ldquo;Anything that can go wrong will go wrong.\u0026rdquo;\n You started to feel hopeless. Three days to the exam, you had only studied half the subject.\nTwo days to the exam, still no progress. One day to the exam\u0026hellip;\nTiktok, tiktok. Time still ticking.\nOne day to the exam. You felt hopeless. How come everything always has to come at once?\nWell, it\u0026rsquo;s not something new these days. I mean, we all have plenty of work to do. Some we can control. Some we can\u0026rsquo;t.\nBut hey, things still need to be done. It\u0026rsquo;s our responsibility to do that. We can\u0026rsquo;t control what\u0026rsquo;s coming to us, but we can control our emotions and act. How you face challenges, how you solve them, you\u0026rsquo;re the one who decides.\nIt\u0026rsquo;s okay to not be okay. But promise me, you\u0026rsquo;ll be strong afterward. Take a step back, like get some sleep, and return stronger than ever. Promise me you won\u0026rsquo;t give up, because you\u0026rsquo;ve tried so hard to go this far.\nBetter days will come, I promise.\n","date":"2022-04-13T00:00:00Z","image":"https://hathai25.github.io/p/a-letter-to-myself/img_hu8358f1fea9ebd98e51d62c0842ae3962_1758222_120x120_fill_q75_box_smart1.jpg","permalink":"https://hathai25.github.io/p/a-letter-to-myself/","title":"A Letter To Myself"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;â€”\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.â€” Rob Pike1 Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Italics Bold Code     italics bold code       A B C D E F     Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien    Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10  \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10  \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   Diff code block 1 2 3 4 5  [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;]   List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Fruit  Apple Orange Banana   Dairy  Milk Cheese    Other Elements â€” abbr, sub, sup, kbd, mark GIFis a bitmap image format.\nH2O\nXn+ Yn= ZnPress CTRL+ALT+Deleteto end the session.\nMost salamandersare nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image \n  The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n  ","date":"2019-03-11T00:00:00Z","image":"https://hathai25.github.io/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"https://hathai25.github.io/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"}]